swagger: "2.0"
info:
  title: MediSupply API
  version: "1.0.0"

basePath: /
schemes: ["https"]
consumes: ["application/json"]
produces: ["application/json"]

parameters:
  CountryHeader:
    name: X-Country
    in: header
    required: true
    type: string

# ===== Seguridad (JWT) =====
securityDefinitions:
  jwt_auth:
    type: oauth2
    flow: implicit
    authorizationUrl: ""
    x-google-issuer: "${JWT_ISSUER}"
    x-google-jwks_uri: "${JWT_JWKS_URI}"

# Por defecto TODO requiere JWT:
security:
  - jwt_auth: []

definitions:
  ErrorResponse:
    type: object
    properties:
      message: { type: string }
      code: { type: integer, format: int32 }

  PedidoCreate:
    type: object
    required: [cliente_id, items]
    properties:
      cliente_id: { type: string }
      items:
        type: array
        items:
          type: object
          required: [sku, qty]
          properties:
            sku: { type: string }
            qty: { type: integer, format: int32 }

  Pedido:
    type: object
    properties:
      id: { type: string }
      status: { type: string }
      created_at: { type: string, format: date-time }

  MeResponse:
    type: object
    properties:
      sub: { type: string }
      email: { type: string }
      name: { type: string }
      roles:
        type: array
        items: { type: string }

paths:
  /v1/pedidos:
    get:
      operationId: Pedidos_List
      x-google-backend:
        address: "${MS_PEDIDOS_URL}"
      summary: Listar pedidos (opcional por ID)
      parameters:
        - $ref: "#/parameters/CountryHeader"
        - name: id
          in: query
          type: string
          required: false
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
          schema: { $ref: "#/definitions/ErrorResponse" }
        403:
          description: Forbidden
          schema: { $ref: "#/definitions/ErrorResponse" }
        500:
          description: Server error
          schema: { $ref: "#/definitions/ErrorResponse" }

    post:
      operationId: Pedidos_Create
      x-google-backend:
        address: "${MS_PEDIDOS_URL}"
      summary: Crear un pedido
      parameters:
        - name: body
          in: body
          required: true
          schema: { $ref: "#/definitions/PedidoCreate" }
        - $ref: "#/parameters/CountryHeader"
      responses:
        201:
          description: Creado
          schema: { $ref: "#/definitions/Pedido" }
        400:
          description: Bad request
          schema: { $ref: "#/definitions/ErrorResponse" }
        401:
          description: Unauthorized
          schema: { $ref: "#/definitions/ErrorResponse" }
        500:
          description: Server error
          schema: { $ref: "#/definitions/ErrorResponse" }

  /v1/auth/login:
    post:
      operationId: Auth_Login
      security: []   # público
      x-google-backend:
        address: "${MS_USUARIOS_AUTENTICACION_URL}"
      summary: Login (emite JWT)
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required: [username, password]
            properties:
              username: { type: string }
              password: { type: string }
        - $ref: "#/parameters/CountryHeader"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              access_token:  { type: string }
              refresh_token: { type: string }
              token_type:    { type: string }
              expires_in:    { type: integer, format: int32 }
        401:
          description: Unauthorized
          schema: { $ref: "#/definitions/ErrorResponse" }

  /v1/auth/register:
    post:
      operationId: Auth_Register
      security: []   # público
      x-google-backend:
        address: "${MS_USUARIOS_AUTENTICACION_URL}"
      summary: Register user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required: [username, role, institution_name, password]
            properties:
              username: { type: string }
              role: { type: string }
              institution_name: { type: string }
              password: { type: string }
        - $ref: "#/parameters/CountryHeader"
      responses:
        201:
          description: Created
        400:
          description: Bad request
          schema: { $ref: "#/definitions/ErrorResponse" }

  /v1/auth/refresh:
    post:
      operationId: Auth_Refresh
      security: []   # público
      x-google-backend:
        address: "${MS_USUARIOS_AUTENTICACION_URL}"
      summary: Refresh token
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required: [refresh_token]
            properties:
              refresh_token: { type: string }
        - $ref: "#/parameters/CountryHeader"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              access_token:  { type: string }
              token_type:    { type: string }
              expires_in:    { type: integer, format: int32 }
        401:
          description: Unauthorized
          schema: { $ref: "#/definitions/ErrorResponse" }

  /v1/usuarios/me:
    get:
      operationId: Usuarios_Me
      x-google-backend:
        address: "${MS_USUARIOS_AUTENTICACION_URL}"
      summary: Perfil del usuario autenticado
      parameters:
        - $ref: "#/parameters/CountryHeader"
      responses:
        200:
          description: OK
          schema: { $ref: "#/definitions/MeResponse" }
        401:
          description: Unauthorized
          schema: { $ref: "#/definitions/ErrorResponse" }

  /.well-known/jwks.json:
    get:
      operationId: JWKS_Get
      security: []  # público y sin X-Country
      x-google-backend:
        address: "${MS_USUARIOS_AUTENTICACION_URL}"
      summary: JWKS
      responses:
        200:
          description: OK
